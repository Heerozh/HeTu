# HeTu配置文件模板

# 你的游戏服务器端代码文件，也就是System和Component的定义
APP_FILE: app.py

# 项目名称，也代表加载app_file中的哪个namespace
NAMESPACE: game_short_name

# 服务器实例名称，每个实例是一个副本
INSTANCE_NAME: game_name_region1234

# 开启服务器的debug模式，打印debug消息，并且自动生成调试用的https证书
DEBUG: false
# 开启web控制后台，GET /获得信息 POST /reload重载代码 POST /shutdown关闭服务器
#INSPECTOR: true
#INSPECTOR_PORT: 6457

# SSL配置
#CERT_CHAIN:
#  - null  # 第一个设null禁止通过IP查看证书
#  - cert: /path/to/example.com/fullchain.pem
#    key: /path/to/example.com/privkey.pem
#    password: 可选，如果密钥有密码的话
#  - cert: /path/to/example2.cn/fullchain.pem
#    key: /path/to/example2.cn/privkey.pem
#    password: 可选，如果密钥有密码的话


# 服务器Websocket监听地址
LISTEN: 0.0.0.0:2466

# 工作进程数，-1 为自动按cpu核心数
WORKER_NUM: 4

# 反正是Websocket，可以关了加性能
ACCESS_LOG: false

# 传入消息的最大字节、ping间隔秒、ping无响应关闭连接秒
# !eval表示返回后面中括号内的代码执行结果
WEBSOCKET_MAX_SIZE: !eval [ 2 ** 19 ]  # 0.5MB
# WEBSOCKET_PING_INTERVAL = 20
# WEBSOCKET_PING_TIMEOUT = 20

# 闲置多少秒未调用System则视为断线
SYSTEM_CALL_IDLE_TIMEOUT: !eval [ 60 * 2 ]
# 限制每个IP可以创建多少匿名连接（提权登陆后不受此限制）
MAX_ANONYMOUS_CONNECTION_BY_IP: 10

# 限制未登录客户端发送消息的频率，可以设置多个指标，格式为[最大数量，统计时间（秒）]，默认值意思是限制每秒1条消息
# 登录提权后限制次数*10，或自己在login逻辑中修改ctx.client_send_limits值来实现
CLIENT_SEND_LIMITS:
  - [ 10, 1 ]
  - [ 27, 5 ]
  - [ 100, 50 ]
  - [ 300, 300 ]
# 限制服务器端发送给未登录客户端消息的频率，格式同上
SERVER_SEND_LIMITS:
  - [ 10, 1 ]
  - [ 27, 5 ]
  - [ 100, 50 ]
  - [ 300, 300 ]
# 限制未登录客户端最大允许订阅的行数。每次Select算1行，每次Query后算返回的行数。
# 登录提权后限制数*100，或自己在login逻辑中修改ctx.max_row_sub值来实现
MAX_ROW_SUBSCRIPTION: 10
# 限制未登录客户端最大允许订阅的Index数(Query订阅)。每次Query订阅+1。
MAX_INDEX_SUBSCRIPTION: 1


# 消息协议，可以在app代码中自己包装class，在内部实现自定义协议
PACKET_COMPRESSION_CLASS: null     # 通过该class的compress和decompress静态方法进行压缩和解压缩
PACKET_CRYPTOGRAPHY_CLASS: null    # 通过该class的encrypt和decrypt静态方法进行加密和解密

# ！！ 注意 ！！
# 如果从容器启动standalone模式河图，redis的地址不能用127.0.0.1，因为这是容器内部地址
# 要使用redis所在机器的实际内网ip。比如192.168.1.100

# 后端数据库地址，component中的backend可以指定用这里的哪个后端
BACKENDS:
  backend_name: # 第一条是默认后端，@define_component不指定backend时会用这个
    type: Redis                        # 指定backend的类型，目前只支持Redis
    # url格式：redis://[[username]:[password]]@localhost:6379/0
    master: redis://127.0.0.1:6379/0   # 指定master服务器，只能一个地址
    servants: [ ]                      # 只读副本服务器，如果设置了，所有客户端查询随机在只读副本上进行


# 配置日志，格式https://docs.python.org/3/library/logging.config.html
LOGGING:
  version: 1
  disable_existing_loggers: false

  loggers:
    root: # 根日志记录器，所有未被过滤掉的日志都会经过这里
      level: DEBUG  # 接受日志级别，生产用INFO
      handlers:    # 输出目标，这里输出到进程安全的log_queue，这样可以把多进程的日志合并到一起
        - log_queue
    HeTu.root:     # 河图的日志记录器
      level: DEBUG
    HeTu.replay:   # replay日志记录器，用于回放复现BUG，level为DEBUG起效，设为ERROR完全关闭。
      level: DEBUG
      propagate: false  # 不向上级传递，不然会传递给root
      handlers:
        - replay_queue

  filters:
    add_context:  # 生成ctx信息的filter
      (): hetu.safelogging.filter.ContextFilter

  handlers:  # 处理器创建，用来决定日志的输出方式
    console:  # 控制台输出
      class: logging.StreamHandler
      formatter: colour
      stream: ext://sys.stdout
    log_to_file:  # 输出到按日期切割的文件，不可直接输入到这里，因为不是进程安全的
      class: logging.handlers.TimedRotatingFileHandler
      formatter: generic
      filename: logs/hetu.log
      encoding: utf-8
      delay: true
      when: D
      interval: 1
      backupCount: 30
    replay_to_file:  # 输出到按大小切割的文件，不可直接输入到这里，因为不是进程安全的
      class: logging.handlers.RotatingFileHandler
      formatter: generic
      filename: logs/replay.log
      encoding: utf-8
      delay: true
      maxBytes: !eval [ 2 ** 28 ]  # 256MB
      backupCount: 20  # 20 * 256MB = 5GB
#    syslog:  # 也可以用syslog输出
#      class: logging.handlers.SysLogHandler
#      formatter: generic
#      address: /dev/log
#      facility: local0
    log_queue: # 进程安全的queue
      class: logging.handlers.QueueHandler
      filters: # 如果要生成ctx信息(formatters里%(ctx))，需要加这个filter。只能加在QueueHandler上
        - add_context
      queue: hetu.safelogging.handlers.process_safe_queue
      listener: hetu.safelogging.handlers.AutoListener  # 定义消费器，AutoListener会自动启动和停止
      handlers: # 消费此queue的handler
        - console
        - log_to_file
    replay_queue:
      class: logging.handlers.QueueHandler
      filters:
        - add_context  # 如果要生成ctx信息，需要加这个filter
      queue: hetu.safelogging.handlers.process_safe_queue
      listener: hetu.safelogging.handlers.AutoListener
      handlers:
        - replay_to_file

  formatters:
    colour:   # 彩色格式
      class: sanic.logging.formatter.AutoFormatter
    generic:  # 文本格式
      format: '%(ident)s %(asctime)s %(levelname)-8s %(name)-12s %(ctx)-27s %(message)s'
      datefmt: '%Y-%m-%d %H:%M:%S %z'
